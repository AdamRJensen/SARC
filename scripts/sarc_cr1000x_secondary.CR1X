'CR1000Xe Series Datalogger

'Kipp & Zonen register no.
'Register 4: Scale factor (s16)
'Register 5: Temperature compensated irradiance (s16) - Temperature compensated net radiation for SGR3
'Register 6: Irradiance raw (s16) - Net radiation for SGR3
'Register 7: Standard deviation temperature compensated irradiance (s16)
'Register 8: Sensor temperature (s16)
'Register 9: External power voltage (s16)
'Register 10: Temperature compensated longwave down irradiance (s16)- only for SGR3
'Register 11: Raw longwave down irradiance (s16)- only for SGR3
'Register 15: Tilt (u16) - only for SMP12
'Register 16: RH (u16) - only for SMP12

'Hukseflux register no.
'Register 2: Temperature compensated irradiance (s32)
'Register 4: Irradiance raw (s32)
'Register 6: Sensor temperature (s16)
'Register 8: Scale factor irradiance (u16)
'Register 9: Scale factor temperature (u16)
'Register 10: Sensor voltage putput (s32)
'Register 98: RH (u16)
'Register 137: Pressure (u16)
'Register 194: Tilt (u16)
'Register 195: Average tilt (u16) - only for DR30
'REgister 196: Fan speed (u16) - only for SR30 and SR300
'Register 198: Heater current (u16)

'SR300 register no.
'Register 512 (0x0200) - Temperature compensated irradiance (float) [W/m^2]
'Register 514 (0x0202) - Instrument temperature (float) [C]
'Register 516 (0x0204) - Uncompensated irradiance (float) [W/m^2]
'Register 647 (0x0287) - Uncompensated thermopile voltage (float) [V]
'Register 1282 (0x0502) - Fan speed (i16) [RPM]
'Register 1410 (0x0582) - Heater current (i16) [mA]
'Register 1536 (0x0600) - Tilt (float) [deg]
'Register 1538 (0x0602) - Rotation (float) [deg]
'Register 1664 (0x0680) - Internal relative humidity (float) [%]

'Apogee register no.
'Register 0+1: Calibrated output watts
'Register 2+3: detector millivolts 
'Register 34+35: Heater status

'EKO MS80SH register no.
'Register 2: Adjusted solar irradiance [W/m^2]
'Register 8: Sensor temperature [C]
'Register 14: x-axis of tilt [degrees]
'Register 16: y-axis of tilt [degrees]
'Register 18: Raw solar irradiance  [W/m^2]
'Register 20: Sensor output voltage [mV]
'Register 24: sensor humidity [%]

'FTP server specs
Public FTPResultCodeFast
Public FTPResultCodeSlow
'FTP parameter strings (as constants), Message String & Result Variable



'PH1 - SN: 190116
Const PH1_190116_modbus_addr = 24
Dim PH1_190116_result_code As Long
Dim PH1_190116_scale_factor As Float
Dim PH1_190116_raw_data(5) As Long
Public PH1_190116_data(4) As Float
Alias PH1_190116_data(1) = PH1_190116_DNI_Wm2: Units PH1_190116_DNI_Wm2 = W/m^2
Alias PH1_190116_data(2) = PH1_190116_DNI_raw_Wm2: Units PH1_190116_DNI_raw_Wm2 = W/m^2
Alias PH1_190116_data(3) = PH1_190116_DNI_std_Wm2: Units PH1_190116_DNI_std_Wm2 = W/m^2
Alias PH1_190116_data(4) = PH1_190116_temperature_degC: Units PH1_190116_temperature_degC = degC

'PR1 - SN: 190116
Const PR1_190116_modbus_addr = 19
Dim PR1_190116_result_code As Long
Dim PR1_190116_scale_factor As Float
Dim PR1_190116_raw_data(5) As Long
Public PR1_190116_data(4) As Float
Alias PR1_190116_data(1) = PR1_190116_DHI_Wm2: Units PR1_190116_DHI_Wm2 = W/m^2
Alias PR1_190116_data(2) = PR1_190116_DHI_raw_Wm2: Units PR1_190116_DHI_raw_Wm2 = W/m^2
Alias PR1_190116_data(3) = PR1_190116_DHI_std_Wm2: Units PR1_190116_DHI_std_Wm2 = W/m^2
Alias PR1_190116_data(4) = PR1_190116_temperature_degC: Units PR1_190116_temperature_degC = degC

'DR30 - SN: 65086
Const DR30_65086_modbus_addr = 22
Dim DR30_65086_result_code As Long
'Public DR30_65086_irrad_scale_factor As Long
'Public DR30_65086_temp_scale_factor As Long
Dim DR30_65086_raw_data(2) As Long
Public DR30_65086_data(7) As Float
Alias DR30_65086_data(1) = DR30_65086_DNI_Wm2: Units DR30_65086_DNI_Wm2 = W/m^2
Alias DR30_65086_data(2) = DR30_65086_DNI_raw_Wm2: Units DR30_65086_DNI_raw_Wm2 = W/m^2
Alias DR30_65086_data(3) = DR30_65086_out_voltage_mV : Units DR30_65086_out_voltage_mV = mV
Alias DR30_65086_data(4) = DR30_65086_temperature_degC : Units DR30_65086_temperature_degC = degC
Alias DR30_65086_data(5) = DR30_65086_tilt_deg : Units DR30_65086_tilt_deg = deg
Alias DR30_65086_data(6) = DR30_65086_rh_per : Units DR30_65086_rh_per = per
Alias DR30_65086_data(7) = DR30_65086_heater_current_mA : Units DR30_65086_heater_current_mA = mA

'SR30 - SN: 23485
Const SR30_23485_modbus_addr = 17
Dim SR30_23485_result_code As Long
Dim SR30_23485_raw_data(2) As Long
Public SR30_23485_data(8) As Float
Alias SR30_23485_data(1) = SR30_23485_GHI_Wm2: Units SR30_23485_GHI_Wm2 = W/m^2
Alias SR30_23485_data(2) = SR30_23485_GHI_raw_Wm2: Units SR30_23485_GHI_raw_Wm2 = W/m^2
Alias SR30_23485_data(3) = SR30_23485_out_voltage_mV : Units SR30_23485_out_voltage_mV = mV
Alias SR30_23485_data(4) = SR30_23485_temperature_degC : Units SR30_23485_temperature_degC = degC
Alias SR30_23485_data(5) = SR30_23485_rh_per : Units SR30_23485_rh_per = per
Alias SR30_23485_data(6) = SR30_23485_tilt_deg : Units SR30_23485_tilt_deg = deg
Alias SR30_23485_data(7) = SR30_23485_fan_speed_rpm : Units SR30_23485_fan_speed_rpm = rpm 'Nominal ventilator speed is 7400 RPM at 20 Â°C
Alias SR30_23485_data(8) = SR30_23485_heater_current_mA : Units SR30_23485_heater_current_mA = mA

'SR300 - SN: 45389
Const SR300_45389_modbus_addr = 21
Dim SR300_45389_result_code
Dim SR300_45389_raw_data_int As Long
Dim SR300_45389_raw_data_float(3) As Float
Public SR300_45389_data(9) As Float
Alias SR300_45389_data(1) = SR300_45389_GHI_Wm2 : Units SR300_45389_GHI_Wm2 = W/m^2
Alias SR300_45389_data(2) = SR300_45389_temperature_degC : Units SR300_45389_temperature_degC = degC
Alias SR300_45389_data(3) = SR300_45389_GHI_raw_Wm2 : Units SR300_45389_GHI_raw_Wm2 = W/m^2
Alias SR300_45389_data(4) = SR300_45389_out_voltage_mV : Units SR300_45389_out_voltage_mV = mV
Alias SR300_45389_data(5) = SR300_45389_tilt_deg : Units SR300_45389_tilt_deg = deg
Alias SR300_45389_data(6) = SR300_45389_rotation_deg : Units SR300_45389_rotation_deg = deg
Alias SR300_45389_data(7) = SR300_45389_rh_per : Units SR300_45389_rh_per = per
Alias SR300_45389_data(8) = SR300_45389_fan_speed_rpm : Units SR300_45389_fan_speed_rpm = rpm
Alias SR300_45389_data(9) = SR300_45389_heater_current_mA : Units SR300_45389_heater_current_mA = mA

'SRD100 - SN: 14401
Const SRD100_14401_modbus_addr = 26
Dim SRD100_14401_result_code
Dim SRD100_14401_raw_data_float(2) As Float
Dim SRD100_14401_raw_data_int As Long
Public SRD100_14401_data(4) As Float
Alias SRD100_14401_data(1) = SRD100_14401_DHI_Wm2 : Units SRD100_14401_DHI_Wm2 = W/m^2
Alias SRD100_14401_data(2) = SRD100_14401_temperature_degC : Units SRD100_14401_temperature_degC = degC
Alias SRD100_14401_data(3) = SRD100_14401_rh_per : Units SRD100_14401_rh_per = per
Alias SRD100_14401_data(4) = SRD100_14401_heater_current_mA : Units SRD100_14401_heater_current_mA = mA

'SP-522 - SN: 1246
'TODO - check the units of the outputs!! Manual mentions the irradiance is in watts and does not give unit for heater
Const SP522_1246_modbus_addr = 30
Dim SP522_1246_result_code
Dim SP522_1246_raw_data(2) As Float
Public SP522_1246_data(3) As Float = NAN
Alias SP522_1246_data(1) = SP522_1246_GHI_Wm2 : Units SP522_1246_GHI_Wm2 = W/m^2
Alias SP522_1246_data(2) = SP522_1246_out_voltage_mV  : Units SP522_1246_out_voltage_mV  = mV
Alias SP522_1246_data(3) = SP522_1246_heater_state

'SP-422 - SN: 1843
'TODO - check the units of the outputs!! Manual mentions the irradiance is in watts and does not give unit for heater
Const SP422_1843_modbus_addr = 29
Dim SP422_1843_result_code
Dim SP422_1843_raw_data(2) As Float
Public SP422_1843_data(3) As Float = NAN
Alias SP422_1843_data(1) = SP422_1843_GHI_Wm2 : Units SP422_1843_GHI_Wm2 = W/m^2
Alias SP422_1843_data(2) = SP422_1843_out_voltage_mV  : Units SP422_1843_out_voltage_mV  = mV
Alias SP422_1843_data(3) = SP422_1843_heater_state


'EKO MS80SH - SN: S24053407
Const MS80SH_S24053407_modbus_addr = 23
Public MS80SH_S24053407_result_code
Dim MS80SH_S24053407_raw_data(12) As Float
Public MS80SH_S24053407_data(12) As Float
Alias MS80SH_S24053407_data(1) = MS80SH_S24053407_GHI_Wm2 : Units MS80SH_S24053407_GHI_Wm2 = W/m^2
Alias MS80SH_S24053407_data(4) = MS80SH_S24053407_temperature_degC : Units MS80SH_S24053407_temperature_degC = degC
Alias MS80SH_S24053407_data(7) = MS80SH_S24053407_tilt_x_deg : Units MS80SH_S24053407_tilt_x_deg = deg
Alias MS80SH_S24053407_data(8) = MS80SH_S24053407_tilt_y_deg : Units MS80SH_S24053407_tilt_y_deg = deg
Alias MS80SH_S24053407_data(9) = MS80SH_S24053407_GHI_raw_Wm2 : Units MS80SH_S24053407_GHI_raw_Wm2 = W/m^2
Alias MS80SH_S24053407_data(10) = MS80SH_S24053407_out_voltage_mV : Units MS80SH_S24053407_out_voltage_mV = mV
Alias MS80SH_S24053407_data(12) = MS80SH_S24053407_rh_per : Units MS80SH_S24053407_rh_per = per

'EKO MS80SHplus - SN: 1209
Const MS80SHplus_1209_modbus_addr = 28
Public MS80SHplus_1209_result_code
Dim MS80SHplus_1209_raw_data(10) As Long
Dim MS80SHplus_1209_raw_data_unsigned As Long
Public MS80SHplus_1209_data(10) As Float = NAN
Alias MS80SHplus_1209_data(1) = MS80SHplus_1209_GHI_Wm2 : Units MS80SHplus_1209_GHI_Wm2 = W/m^2
Alias MS80SHplus_1209_data(4) = MS80SHplus_1209_DHI_Wm2 : Units MS80SHplus_1209_DHI_Wm2 = W/m^2
Alias MS80SHplus_1209_data(5) = MS80SHplus_1209_DNI_Wm2 : Units MS80SHplus_1209_DNI_Wm2 = W/m^2
Alias MS80SHplus_1209_data(6) = MS80SHplus_1209_GHI_reading_Wm2 : Units MS80SHplus_1209_GHI_reading_Wm2 = W/m^2
Alias MS80SHplus_1209_data(7) = MS80SHplus_1209_temperature_degC : Units MS80SHplus_1209_temperature_degC = degC
Alias MS80SHplus_1209_data(8) = MS80SHplus_1209_tilt_x_deg : Units MS80SHplus_1209_tilt_x_deg = deg
Alias MS80SHplus_1209_data(9) = MS80SHplus_1209_tilt_y_deg : Units MS80SHplus_1209_tilt_y_deg = deg
Alias MS80SHplus_1209_data(10) = MS80SHplus_1209_rh_per : Units MS80SHplus_1209_rh_per = per

'Licor - SN: PY116375
Public Licor_PY116375_GHI_mV As Float: Units Licor_PY116375_GHI_mV = mV

'Star Schenk - SN: 7773
Public StarSchenk_7773_GHI_mV As Float: Units StarSchenk_7773_GHI_mV = mV

'Time_out - wait time for a modbus call
Const MODBUS_TIMEOUT = 3 ' [multiple of 0.01 seconds]
Const MODBUS_RETRIES = 1 ' number of tries for each modbus request

'Declare variables for creating a timestamp for file saving
Dim TStamp_format_4 As String * 32
Dim TStamp_format_6 As String * 32
Public TStamp As String * 32 : Alias TStamp = Time_stamp

'Set sclae factor
Const SCALE_CODE = 1 ' Scale factor code for Kipp & Zonen smart instruments
Public Scale_code_initial(2) As Long
Dim Scale_code_result_code(2) As Float

Function kipp_zonen_scale_factor(scale_code_int)
    Dim scale As Float
    If scale_code_int = 2 Then
      scale = 0.01
    ElseIf scale_code_int = 1 Then
      scale = 0.1
    ElseIf scale_code_int = 0 Then
      scale = 1
    ElseIf scale_code_int = -1 Then
      scale = 10
    Else
      scale = NAN
    EndIf
    Return scale
EndFunction


'Save data to Table
DataTable(Fast_table_secondary, 1, -1)
  TableFile("CRD:"&TStamp_format_6&"_secondary_fast_table",11,-1,0,1,Day,0,0)
  DataInterval(0,1,Sec,0)
  Sample(1,TStamp,String)
  Sample(2,PH1_190116_data(),IEEE4)
  Sample(1,PH1_190116_data(4),IEEE4)
  Sample(2,PR1_190116_data(),IEEE4)
  Sample(1,PR1_190116_data(4),IEEE4)
  Sample(1,MS80SH_S24053407_data(1),IEEE4)
  Sample(1,MS80SH_S24053407_data(4),IEEE4)
  Sample(1,MS80SH_S24053407_data(7),IEEE4)
  Sample(1,MS80SH_S24053407_data(8),IEEE4)
  Sample(1,MS80SH_S24053407_data(9),IEEE4)
  Sample(1,MS80SH_S24053407_data(10),IEEE4)
  Sample(1,MS80SH_S24053407_data(12),IEEE4)
  Sample(1,MS80SHplus_1209_data(1),IEEE4)
  Sample(1,MS80SHplus_1209_data(4),IEEE4)
  Sample(1,MS80SHplus_1209_data(5),IEEE4)
  Sample(1,MS80SHplus_1209_data(6),IEEE4)
  Sample(1,MS80SHplus_1209_data(7),IEEE4)
  Sample(1,MS80SHplus_1209_data(8),IEEE4)
  Sample(1,MS80SHplus_1209_data(9),IEEE4)
  Sample(1,MS80SHplus_1209_data(10),IEEE4)
  Sample(3,DR30_65086_data(),IEEE4)
  Sample(1,DR30_65086_data(4),IEEE4)
  Sample(1,DR30_65086_data(5),IEEE4)
  Sample(3,SR30_23485_data(),IEEE4)
  Sample(1,SR30_23485_data(4),IEEE4)
  Sample(1,SR300_45389_data(1),IEEE4)
  Sample(1,SR300_45389_data(2),IEEE4)
  Sample(1,SR300_45389_data(3),IEEE4)
  Sample(1,SR300_45389_data(4),IEEE4)
  Sample(1,SRD100_14401_data(1),IEEE4)
  Sample(1,SRD100_14401_data(2),IEEE4)
  Sample(2,SP522_1246_data(),IEEE4)
  Sample(2,SP422_1843_data(),IEEE4)
  Sample(1,Licor_PY116375_GHI_mV,IEEE4)
  Sample(1,StarSchenk_7773_GHI_mV,IEEE4)
EndTable

DataTable(Slow_table_secondary, 1, -1)
  TableFile("CRD:"&TStamp_format_6&"_secondary_slow_table",11,-1,0,1,Day,0,0)
  DataInterval(0,1,Min,0)
  Sample(1,TStamp,String)
  Sample(1,DR30_65086_data(6),IEEE4)
  Sample(1,DR30_65086_data(7),IEEE4)
  Sample(1,SR30_23485_data(5),IEEE4)
  Sample(1,SR30_23485_data(6),IEEE4)
  Sample(1,SR30_23485_data(7),IEEE4)
  Sample(1,SR30_23485_data(8),IEEE4)
  Sample(1,SR300_45389_data(5),IEEE4)
  Sample(1,SR300_45389_data(6),IEEE4)
  Sample(1,SR300_45389_data(7),IEEE4)
  Sample(1,SR300_45389_data(8),IEEE4)
  Sample(1,SR300_45389_data(9),IEEE4)
  Sample(1,SRD100_14401_data(3),IEEE4)
  Sample(1,SRD100_14401_data(4),IEEE4)
  Sample(1,SP522_1246_data(3),IEEE4)
  Sample(1,SP422_1843_data(3),IEEE4)
EndTable

'Main Program
BeginProg
	SerialOpen(ComC1,19200,2,0,500,4)
	SerialOpen(ComC3,19200,2,0,500,4)
	SerialOpen(ComC5,19200,2,0,500,4)
	SerialOpen(ComC7,19200,2,0,500,4)
  Scan(1,Sec,2,0)

    ' Determine time stamp of iteration and format timestamp string
    TStamp_format_4 = Public.Timestamp(4, 1)
    TStamp_format_6 = Mid(Public.Timestamp(6, 1),1,19)
    ' Format time stamp as ISO 8601 YYYY-MM-DDTHH:MM:SS.fff+00:00
    TStamp = Mid(TStamp_format_4,1,10)+ "T" + Mid(TStamp_format_4,12,12) + "+00:00"
    
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'PH1 (serial number: 190116)
    ModbusClient(PH1_190116_result_code,ComC3,19200,PH1_190116_modbus_addr,4,PH1_190116_raw_data(),4+1,5,MODBUS_RETRIES,MODBUS_TIMEOUT,1)
    'ResultCode is 0 if communication is successful otherwise set to NAN
    If PH1_190116_result_code <> 0 Then PH1_190116_raw_data() = NAN
    PH1_190116_scale_factor = kipp_zonen_scale_factor(PH1_190116_raw_data(1)) 'Convert scale code to scale factor using function
    PH1_190116_data(1) = PH1_190116_raw_data(2) * PH1_190116_scale_factor 'Register 5 - Temperature compensated radiation in W/m2
    PH1_190116_data(2) = PH1_190116_raw_data(3) * PH1_190116_scale_factor 'Register 6 - Raw sensor data - calibrated but not linearized or temperature compensated  
    PH1_190116_data(3) = PH1_190116_raw_data(4) * 0.1 'Register 7 - Standard deviation IO_SENSOR1_DATA
    PH1_190116_data(4) = PH1_190116_raw_data(5) * 0.1 'Register 8 - Body temperature
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'PR1 (serial number: 190116)
    ModbusClient(PR1_190116_result_code,ComC3,19200,PR1_190116_modbus_addr,4,PR1_190116_raw_data(),4+1,5,MODBUS_RETRIES,MODBUS_TIMEOUT,1)
    'ResultCode is 0 if communication is successful otherwise set to NAN
    If PR1_190116_result_code <> 0 Then PR1_190116_raw_data() = NAN
    PR1_190116_scale_factor = kipp_zonen_scale_factor(PR1_190116_raw_data(1)) 'Convert scale code to scale factor using function
    PR1_190116_data(1) = PR1_190116_raw_data(2) * PR1_190116_scale_factor 'Register 5 - Temperature compensated radiation in W/m2
    PR1_190116_data(2) = PR1_190116_raw_data(3) * PR1_190116_scale_factor 'Register 6 - Raw sensor data - calibrated but not linearized or temperature compensated  
    PR1_190116_data(3) = PR1_190116_raw_data(4) * 0.1 'Register 7 - Standard deviation IO_SENSOR1_DATA
    PR1_190116_data(4) = PR1_190116_raw_data(5) * 0.1 'Register 8 - Body temperature
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'DR30 (serial number: 65086)
    ModbusClient(DR30_65086_result_code,ComC7,19200,DR30_65086_modbus_addr,4,DR30_65086_raw_data(),2+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    DR30_65086_data(1) = DR30_65086_raw_data(1) / 100 'Register 2+3 - Temperature compensated radiation in W/m2
    DR30_65086_data(2) = DR30_65086_raw_data(2) / 100 'Register 4+5 - Raw sensor data - calibrated but not linearized or temperature compensated
    If DR30_65086_result_code <> 0 Then DR30_65086_data(1) = NAN
    If DR30_65086_result_code <> 0 Then DR30_65086_data(2) = NAN

    ModbusClient(DR30_65086_result_code,ComC7,19200,DR30_65086_modbus_addr,4,DR30_65086_raw_data(),6+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,1)
    DR30_65086_data(4) = Round(DR30_65086_raw_data(1) / 100, 3) 'Register 6 - Temperature in degC
    If DR30_65086_result_code <> 0 Then DR30_65086_data(4) = NAN

    ModbusClient(DR30_65086_result_code,ComC7,19200,DR30_65086_modbus_addr,4,DR30_65086_raw_data(),10+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    DR30_65086_data(3) = DR30_65086_raw_data(1) * 0.000001 'Register 10+11 - Sensor voltage output in mV
    If DR30_65086_result_code <> 0 Then DR30_65086_data(3) = NAN

    ModbusClient(DR30_65086_result_code,ComC7,19200,DR30_65086_modbus_addr,4,DR30_65086_raw_data(),195+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    DR30_65086_data(5) = DR30_65086_raw_data(1) / 100 'Register 195 - average tilt of sensor in horizontal plane
    If DR30_65086_result_code <> 0 Then DR30_65086_data(5) = NAN
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'SR30 (serial number: 23485)
    ModbusClient(SR30_23485_result_code,ComC5,19200,SR30_23485_modbus_addr,4,SR30_23485_raw_data(),2+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    SR30_23485_data(1) = SR30_23485_raw_data(1) / 100 'Register 2+3 - Temperature compensated radiation in W/m2
    SR30_23485_data(2) = SR30_23485_raw_data(2) / 100 'Register 4+5 - Raw sensor data - calibrated but not linearized or temperature compensated
    If SR30_23485_result_code <> 0 Then SR30_23485_data(1) = NAN
    If SR30_23485_result_code <> 0 Then SR30_23485_data(2) = NAN

    ModbusClient(SR30_23485_result_code,ComC5,19200,SR30_23485_modbus_addr,4,SR30_23485_raw_data(),6+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,1)
    If SR30_23485_result_code <> 0 Then SR30_23485_raw_data() = NAN
    SR30_23485_data(4) = SR30_23485_raw_data(1) / 100 'Register 6 - Temperature in degC

    ModbusClient(SR30_23485_result_code,ComC5,19200,SR30_23485_modbus_addr,4,SR30_23485_raw_data(),10+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    If SR30_23485_result_code <> 0 Then SR30_23485_raw_data() = NAN
    SR30_23485_data(3) = SR30_23485_raw_data(1) * 0.000001 'Register 10+11 - Sensor voltage output in mV
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'SR300 (serial number: 45389)
    ModbusClient(SR300_45389_result_code,ComC5,19200,SR300_45389_modbus_addr,4,SR300_45389_raw_data_float(),512+1,3,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    If SR300_45389_result_code <> 0 Then SR300_45389_raw_data_float() = NAN
    SR300_45389_data(1) = SR300_45389_raw_data_float(1) 'Register 512 (0x0200) - Temperature compensated irradiance (float) [W/m^2]
    SR300_45389_data(2) = SR300_45389_raw_data_float(2) 'Register 514 (0x0202) - Instrument temperature (float) [C]
    SR300_45389_data(3) = SR300_45389_raw_data_float(3) 'Register 516 (0x0204) - Uncompensated irradiance (float) [W/m^2]

    ModbusClient(SR300_45389_result_code,ComC5,19200,SR300_45389_modbus_addr,4,SR300_45389_raw_data_float(),647+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    If SR300_45389_result_code <> 0 Then SR300_45389_raw_data_float() = NAN
    SR300_45389_data(4) = SR300_45389_raw_data_float(1) * 1000 'Register 647 (0x0287) - Uncompensated thermopile voltage (float) [mV]
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'SRD100 (serial number: 14401)
    ModbusClient(SRD100_14401_result_code,ComC5,19200,SRD100_14401_modbus_addr,4,SRD100_14401_raw_data_float(),512+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    If SRD100_14401_result_code <> 0 Then SRD100_14401_raw_data_float() = NAN
    SRD100_14401_data(1) = SRD100_14401_raw_data_float(1) 'Register 512 (0x0200) - Temperature compensated irradiance (float) [W/m^2]
    SRD100_14401_data(2) = SRD100_14401_raw_data_float(2) 'Register 514 (0x0202) - Instrument temperature (float) [C]
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'SP-522 (serial number: 1246)
    ModbusClient(SP522_1246_result_code,ComC7,19200,SP522_1246_modbus_addr,3,SP522_1246_raw_data(),0+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    If SP522_1246_result_code <> 0 Then SP522_1246_raw_data() = NAN
    SP522_1246_data(1) = SP522_1246_raw_data(1) 'Register 0+1 - Calibrated output watts
    SP522_1246_data(2) = SP522_1246_raw_data(2) 'Register 2+3 - Detector millivolts
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'SP-422 (serial number: 1843)
    ModbusClient(SP422_1843_result_code,ComC7,19200,SP422_1843_modbus_addr,3,SP422_1843_raw_data(),0+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    If SP422_1843_result_code <> 0 Then SP422_1843_raw_data() = NAN
    SP422_1843_data(1) = SP422_1843_raw_data(1) 'Register 0+1 - Calibrated output watts
    SP422_1843_data(2) = SP422_1843_raw_data(2) 'Register 2+3 - Detector millivolts
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'EKO MS80SH (serial number: S24053407)
    ModbusClient(MS80SH_S24053407_result_code,ComC3,19200,MS80SH_S24053407_modbus_addr,3,MS80SH_S24053407_raw_data(),2+1,12,MODBUS_RETRIES,MODBUS_TIMEOUT*2,2)
    If MS80SH_S24053407_result_code <> 0 Then MS80SH_S24053407_raw_data() = NAN
    MS80SH_S24053407_data() = MS80SH_S24053407_raw_data()
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'EKO MS80SHplus (serial number: 1209)
    'ModbusClient(MS80SHplus_1209_result_code,ComC3,19200,MS80SHplus_1209_modbus_addr,3,MS80SHplus_1209_raw_data(),7+1,5,MODBUS_RETRIES,MODBUS_TIMEOUT,1)
    'MS80SHplus_1209_data() = MS80SHplus_1209_raw_data() / 10
    'If MS80SHplus_1209_result_code <> 0 Then MS80SHplus_1209_data() = NAN

    'ModbusClient(MS80SHplus_1209_result_code,ComC3,19200,MS80SHplus_1209_modbus_addr,3,MS80SHplus_1209_raw_data(),17+1,4,MODBUS_RETRIES,MODBUS_TIMEOUT,1)
    'MS80SHplus_1209_data(6) = MS80SHplus_1209_raw_data(1) / 10
    'MS80SHplus_1209_data(7) = MS80SHplus_1209_raw_data(2) / 10
    'MS80SHplus_1209_data(8) = MS80SHplus_1209_raw_data(3) / 10
    'MS80SHplus_1209_data(9) = MS80SHplus_1209_raw_data(4) / 10
    'If MS80SHplus_1209_result_code <> 0 Then
    '  MS80SHplus_1209_data(6) = NAN
    '  MS80SHplus_1209_data(7) = NAN
    '  MS80SHplus_1209_data(8) = NAN
    '  MS80SHplus_1209_data(9) = NAN
    'EndIf

    'ModbusClient(MS80SHplus_1209_result_code,ComC3,19200,MS80SHplus_1209_modbus_addr,3,MS80SHplus_1209_raw_data_unsigned,21+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    'MS80SHplus_1209_data(10) = MS80SHplus_1209_raw_data_unsigned / 10
    'If MS80SHplus_1209_result_code <> 0 Then MS80SHplus_1209_data(10) = NAN
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'StarSchenk - (serial number: 7773
    VoltDiff(StarSchenk_7773_GHI_mV,1,AutorangeC,1,True,0,50,1.0,0)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'Licor - (serial number: PY116375)
    VoltDiff(Licor_PY116375_GHI_mV,1,AutorangeC,2,True,0,50,1.0,0)
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		CallTable Fast_table_secondary
		
    'Check the time drift every 24 hrs and reset to UTC if deviation >100 ms
    If IfTime(0,24,Hr) Then NetworkTimeProtocol("ntp.ait.dtu.dk",0,100)

	NextScan


  SlowSequence

  Scan(10,Sec,2,0)

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'DR30 (serial number: 65086)
    ModbusClient(DR30_65086_result_code,ComC7,19200,DR30_65086_modbus_addr,4,DR30_65086_raw_data(),98+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    If DR30_65086_result_code <> 0 Then DR30_65086_raw_data() = NAN
    DR30_65086_data(6) = DR30_65086_raw_data(1) / 100 'Register 98 - Internal relative humidity of the sensor in %
    
    ModbusClient(DR30_65086_result_code,ComC7,19200,DR30_65086_modbus_addr,4,DR30_65086_raw_data(),198+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    If DR30_65086_result_code <> 0 Then DR30_65086_raw_data() = NAN
    DR30_65086_data(7) = DR30_65086_raw_data(1) 'Register 198 - Heater current [mA]
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  
  
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'SR30 (serial number: 23485)
    ModbusClient(SR30_23485_result_code,ComC5,19200,SR30_23485_modbus_addr,4,SR30_23485_raw_data(),98+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    SR30_23485_data(5) = SR30_23485_raw_data(1) / 100 'Register 98 - Internal relative humidity of the sensor in %
    If SR30_23485_result_code <> 0 Then SR30_23485_data(5) = NAN
  
    ModbusClient(SR30_23485_result_code,ComC5,19200,SR30_23485_modbus_addr,4,SR30_23485_raw_data(),194+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    SR30_23485_data(6) = SR30_23485_raw_data(1) / 100 'Register 194 - tilt of sensor in horizontal plane
    If SR30_23485_result_code <> 0 Then SR30_23485_data(6) = NAN
    
    ModbusClient(SR30_23485_result_code,ComC5,19200,SR30_23485_modbus_addr,4,SR30_23485_raw_data(),196+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    SR30_23485_data(7) = SR30_23485_raw_data(1) 'Register 196 - Fan speed [rpm]
    If SR30_23485_result_code <> 0 Then SR30_23485_data(7) = NAN
  
    ModbusClient(SR30_23485_result_code,ComC5,19200,SR30_23485_modbus_addr,4,SR30_23485_raw_data(),198+1,1,MODBUS_RETRIES,MODBUS_TIMEOUT,3)
    SR30_23485_data(8) = SR30_23485_raw_data(1) 'Register 198 - Heater current [mA]
    If SR30_23485_result_code <> 0 Then SR30_23485_data(8) = NAN
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
  
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'SR300 (serial number: 45389)
    ModbusClient(SR300_45389_result_code,ComC5,19200,SR300_45389_modbus_addr,4,SR300_45389_raw_data_float(),1536+1,2,MODBUS_RETRIES,MODBUS_TIMEOUT,2)
    If SR300_45389_result_code <> 0 Then SR300_45389_raw_data_float() = NAN
    SR300_45389_data(5) = SR300_45389_raw_data_float(1) 'Register 1536 (0x0600) - Tilt (float) [deg]
    SR300_45389_data(6) = SR300_45389_raw_data_float(2) 'Register 1538 (0x0602) - Rotation (float) [deg]

    ModbusClient(MS80SHplus_1209_result_code,ComC3,19200,MS80SHplus_1209_modbus_addr,3,MS80SHplus_1209_raw_data(),7+1,5,MODBUS_RETRIES,MODBUS_TIMEOUT,1)
    MS80SHplus_1209_data() = MS80SHplus_1209_raw_data() / 10
    If MS80SHplus_1209_result_code <> 0 Then MS80SHplus_1209_data() = NAN


    ' Set scale factor of Kipp & Zonen smart pyranometers
    ' The tries and timeouts have been increased to ensure that the scale factors are set
    ModbusClient(Scale_code_result_code(1),ComC3,19200,PH1_190116_modbus_addr,4,scale_code_initial(1),34+1,1,3,5,1)
    ' If the scale code is not 1, then it is changed
    If scale_code_initial(1) <> 1 Then ModbusClient(Scale_code_result_code(1),ComC3,19200,PH1_190116_modbus_addr,6,SCALE_CODE,34+1,1,3,5,1)
    
    ModbusClient(Scale_code_result_code(2),ComC3,19200,PR1_190116_modbus_addr,4,scale_code_initial(2),34+1,1,3,5,1)
    If scale_code_initial(2) <> 1 Then ModbusClient(Scale_code_result_code(2),ComC3,19200,PR1_190116_modbus_addr,6,SCALE_CODE,34+1,1,3,5,1)
    
		CallTable Slow_table_secondary
	  NextScan
  EndSequence	
  

 'Send Data To FTP server
  SlowSequence
     Do
        Delay(1,10,Sec)
        FTPResultCodeSlow = FTPClient(IPAddress,UserName,Password,"Slow_table_secondary","YYYY-MM-DD_HH-MM-SS_secondary_slow_table.csv",2,0,1,Day,11)
        FTPResultCodeFast = FTPClient(IPAddress,UserName,Password,"Fast_table_secondary","/YYYY-MM-DD_HH-MM-SS_secondary_fast_table.csv",2,0,1,Day,11)
		    'This function returns -1 if successful, 0 if it fails, or -2 if execution did not occur when the instruction was called
     Loop
EndProg

